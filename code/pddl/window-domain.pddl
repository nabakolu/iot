(define (domain awp)
(:requirements :strips :typing :numeric-fluents :preferences)
(:types 
    actuator sensors - object
    window blind heater - actuator
    noise wind rain light co2 - sensors
)

(:predicates 
            ; actuator states
            (open ?w - actuator)
            (closed ?w - actuator)
            ; windows
            (action_available ?w - window)
            (not_action_available ?w - window)
            ; heater
            (heater_action_available ?h - heater)
            (heater_off ?h - heater)
            (heater_on ?h - heater)
            
            
            
            
            
            ; heater states
            (off ?h - heater)
            (middle ?h - heater)
            (high ?h - heater)
            (temp_too_low ?t - heater)
            (temp_too_high ?t - heater)
            ; co2 states
            (not_perfect ?c - co2)
            (ok ?c - co2)


            (high_noise ?w - window ?n - noise)
            (low_noise ?w - window ?n - noise)
            (blinding ?w - blind)
            (not_blinding ?w - blind)
            (not_blinding_initial ?w - blind)
            (blinding_initial ?w - blind)
            (test - window)

)

(:functions
    ;ambient noise weight
    (ambientnoise ?w - window)
    ;wind weight
    (wind ?w - window)
    ;rain noise weight
    (rain ?w - window)
    ;heater target range
    (min_temp ?h - heater)
    (curr_temp ?h - heater)
    (outdoor_temp ?h - heater)
    ;checks if window is open
    (any_window_open)
    ;insentive earned by opening blinds
    (openedblinds)
    ;keep track of co2 weights
    (co2value)
    ;value generated by using heaters
    (heaterweight)
    
    ;(MaxCO2-currCO2)
    ;(windprevente+rainprevented+noiseprevented)
)

(:action openwindow
:parameters (?window - window ?co2 - co2)
:precondition (and ;(closed ?window)
                (not_perfect ?co2)
                (action_available ?window)
)
:effect  (and 
                (open ?window)
                (not(closed ?window))
                (not (action_available ?window))
                (not_action_available ?window)
                (assign (any_window_open) 1)
                ;(assign (co2value) (- (co2value) (ambientnoise ?window)))
            (assign
                (co2value)
                (+ co2value (- 1 (+ (ambientnoise ?window) (+ (wind ?window) (rain ?window))))))
        ))

(:action turn_heater_on
    :parameters (?heater - heater)
    :precondition (and (heater_off ?heater)
                        (heater_action_available ?heater)
                        (and (< (curr_temp ?heater) (min_temp ?heater))
                        (forall (?w - window)
                            (not_action_available ?w)
                        )
                        )
    )
    :effect (and (not (heater_off ?heater))
                (heater_on ?heater)
                (not (heater_action_available ?heater))
                (assign (heaterweight) 100)
                ; (assign (heaterweight) (+ (heaterweight) (- (* (- (min_temp ?heater) (curr_temp ?heater)) (- (min_temp ?heater) (curr_temp ?heater))) (* (any_window_open) 
                ; (* (- (curr_temp ?heater) (outdoor_temp ?heater)) (- (curr_temp ?heater) (outdoor_temp ?heater))) ;punishment for heating while window is open
                ; ))))
                ; curr_temp < min_temp --> how much colder? --> reward --> min_temp-current_temp
                ; additionally window open --> outdoor temp? --> punish opening window --> |current_temp-outdoor_temp|
    )
)

(:action turn_heater_off
    :parameters (?heater - heater)
    :precondition (and (heater_on ?heater)
                        (heater_action_available ?heater)
                        (and (< (min_temp ?heater) (curr_temp ?heater)))
    )
    :effect (and (not (heater_on ?heater))
                (heater_off ?heater)
                (not (heater_action_available ?heater))
                ;(assign (heaterweight) (+ (heaterweight) -100))
    )
)


(:action closewindow
:parameters (?window - window ?co2 - co2)
:precondition (and ;(open ?window) 
                    (action_available ?window))
:effect  (and   (closed ?window)
                (not(open ?window))
                (not (action_available ?window))
                (increase (co2value) 0.1)
                (not_action_available ?window)
                ; (not(high_noise ?window ?noise))
                ; (low_noise ?window ?noise)
))

(:action openblinds
:parameters (?blind - blind)
:precondition (and (closed ?blind)
                    (not_blinding_initial ?blind)
)
:effect  (and   (open ?blind)
                (not (closed ?blind))
                (increase (openedblinds) 1)
))

(:action closeblinds
:parameters (?blind - blind)
:precondition (and (blinding ?blind)
                    (open ?blind)
)
:effect  (and   (closed ?blind)
                (not (open ?blind))
                (not(blinding ?blind))
                (not_blinding ?blind)
))

; (:durative-action heating_high
;     :parameters (?heater - heater)
;     :duration (and (< ?duration 60) (> ?duration 0))
;     :condition ()
;     :effect (and 
;         (at start (and 
;         ))
;         (at end (and 
;         ))
;     )
; )

)


